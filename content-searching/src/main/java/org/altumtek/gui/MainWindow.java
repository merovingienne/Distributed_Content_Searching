package org.altumtek.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.altumtek.filemanager.FileManager;
import org.altumtek.filetransfer.FileClient;
import org.altumtek.networkmanager.NetworkManager;
import org.altumtek.networkmanager.RouteTable;
import org.altumtek.networkmanager.utils.IContentSearch;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.List;

public class MainWindow implements IContentSearch {
    private JButton showNeighboursButton;
    private JPanel jPanel;
    private JButton searchButton;
    private JTextField textField1;
    private JButton showFilesButton;
    private JLabel ipLabel;
    private JButton exitButton;
    private JList fileSearchList;
    private JButton downloadButton;
    private JTextArea filesText;
    private JTextArea neighboursText;
    private JTextField ipText;
    private JButton setIPButton;

    private ArrayList<SearchResult> results;

    MainWindow() {
        setIPButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                NetworkManager.getInstance(ipText.getText());
                initialize();
            }
        });
    }

    public void initialize() {
        NetworkManager.getInstance().start();
        ipLabel.setText("IP: " + NetworkManager.getInstance().getIpPort());
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                NetworkManager.getInstance().stop();
            }
        });

        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                System.out.println("Search for");
                String search = textField1.getText();
                System.out.println(search);
                NetworkManager.getInstance().search(search, MainWindow.this);
                results = new ArrayList<>();
                MainWindow.this.updateListView();
            }
        });
        downloadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                int selectedIndex = fileSearchList.getSelectedIndex();
                MainWindow.SearchResult searchResult = results.get(selectedIndex);
                FileClient.download(searchResult.ip.getHostAddress(), searchResult.port, searchResult.fileName);

            }
        });
        showFilesButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                System.out.println("My files");
                String text = "";
                for (String file : FileManager.getIntance().getMyFiles()) {
                    text = text + file + "\n";
                    System.out.println(file);
                }
                filesText.setText(text);
            }
        });
        showNeighboursButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                System.out.println("Neighbour list");
                String text = "";
                for (RouteTable.Node node : NetworkManager.getInstance().getRouteTable().getNeighbourList()) {
                    text = text + node.ip.getHostAddress() + " " + node.port + "\n";
                    System.out.println(node.ip + ":" + node.port);
                }
                neighboursText.setText(text);
            }
        });
    }

    public static void main(String[] args) {
        new Thread(() -> {
            JFrame frame = new JFrame("Calculator");
            frame.setMinimumSize(new Dimension(400, 600));
            frame.setContentPane(new MainWindow().jPanel);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.pack();
            frame.setVisible(true);
        }).start();

    }

    @Override
    public void onSearchResults(InetAddress ownerAddress, int port, List<String> files) {
        System.out.println("Files received");
        for (String file : files) {
            System.out.println(file + " ---- " + port);
            results.add(new SearchResult(file, ownerAddress, port));
        }
        this.updateListView();
    }

    private void updateListView() {
        DefaultListModel model = new DefaultListModel();
        for (int i = 0; i < results.size(); i++) {
            model.add(i, results.get(i).fileName + " - " + results.get(i).ip.getHostAddress() + ":" + results.get(i).port);
        }
        fileSearchList.setModel(model);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        jPanel = new JPanel();
        jPanel.setLayout(new GridLayoutManager(13, 2, new Insets(0, 0, 0, 0), -1, -1));
        searchButton = new JButton();
        searchButton.setText("Search");
        jPanel.add(searchButton, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField1 = new JTextField();
        jPanel.add(textField1, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        showFilesButton = new JButton();
        showFilesButton.setText("Show Files");
        jPanel.add(showFilesButton, new GridConstraints(9, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ipLabel = new JLabel();
        ipLabel.setText("Label");
        jPanel.add(ipLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        exitButton = new JButton();
        exitButton.setText("Exit");
        jPanel.add(exitButton, new GridConstraints(12, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fileSearchList = new JList();
        jPanel.add(fileSearchList, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        downloadButton = new JButton();
        downloadButton.setText("Download");
        jPanel.add(downloadButton, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        neighboursText = new JTextArea();
        neighboursText.setEditable(false);
        jPanel.add(neighboursText, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        showNeighboursButton = new JButton();
        showNeighboursButton.setText("Show neighbours");
        jPanel.add(showNeighboursButton, new GridConstraints(6, 0, 2, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        filesText = new JTextArea();
        filesText.setEditable(false);
        jPanel.add(filesText, new GridConstraints(8, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        ipText = new JTextField();
        jPanel.add(ipText, new GridConstraints(10, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        setIPButton = new JButton();
        setIPButton.setText("Set IP");
        jPanel.add(setIPButton, new GridConstraints(11, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return jPanel;
    }

    private static class SearchResult {
        String fileName;
        InetAddress ip;
        int port;

        public SearchResult(String fileName, InetAddress ip, int port) {
            this.fileName = fileName;
            this.ip = ip;
            this.port = port;
        }
    }

}
